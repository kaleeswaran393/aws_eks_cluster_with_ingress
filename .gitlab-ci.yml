image:
name: hashicorp/terraform:light
entrypoint:
- ‘/usr/bin/env’
- ‘PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin’  AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}’

include:
  # - local: "/templates/.gitlab-ci-aquasec-trivy-scan.yml"
  # - local: "/templates/vars/.gitlab-ci-pipeline-coe-vars.yml"
  # - local: '/templates/.gitlab-ci-aws.yml'
  # - local: '/templates/.gitlab-ci-docker-build.yml'
  # - local: '/templates/.gitlab-ci-checkov-scan.yml'
  - template: Jobs/SAST-IaC.gitlab-ci.yml
  - template: Terraform.latest.gitlab-ci.yml

stages:
  - .pre
  - build
  - scan
  - validate
  - fmt
  - deploy
  - terraform plan
  - checkov scan
  - terraform apply
  - test
  - cleanup


cache:
paths:
- .terraform
key: “$CI_BUILD_REPO”

plan:
stage: terraform plan
variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
script:
- terraform plan -var-file="$environment_var".tfvars -out="$environment_var"-tfplan
- terraform show -json $environment_var-tfplan | jq '.' > $environment_var-tfplan.json
when: always
artifacts:
paths:
- "$environment_var"-tfplan

apply:
stage: apply
script:
- terraform init -backend-config="$environment_var"-backend.tfvars -reconfigure
- terraform workspace select "$environment_var"
- terraform output -json
- terraform apply
when: manual
dependencies:
- plan


# variables:
#   WORKING_DIR: .
#   DOCKER_REGISTRY: $CI_REGISTRY_IMAGE
#   IMAGE_NAME: node-image
#   IMAGE_VERSION: $CI_COMMIT_SHORT_SHA
#   DOCKER_USER: $CI_REGISTRY_USER
#   DOCKER_PASSWORD: $CI_REGISTRY_PASSWORD
#   DOCKER_TARGET_IMAGE: $IMAGE_NAME:$IMAGE_VERSION
#   SBOM_FILE: trivy.cdx.json

# before_script:
#   - export VARIABLE_NAME=ROLE_ARN
#   - |
#     STS=($(aws sts assume-role-with-web-identity \
#     --role-arn ${ROLE_ARN} \
#     --role-session-name "Ship-Devops-${CI_PIPELINE_ID}-${CI_JOB_ID}-Session" \
#     --web-identity-token ${GITLAB_OIDC_TOKEN} \
#     --duration-seconds 3600 \
#     --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
#     --output text))
#     export AWS_ACCESS_KEY_ID="${STS[0]}"
#     export AWS_SECRET_ACCESS_KEY="${STS[1]}"
#     export AWS_SESSION_TOKEN="${STS[2]}"
# after_script:
#   - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

fmt:
  extends: .terraform:fmt
  needs: []

validate:
  extends: .terraform:validate
  needs: []

build:
  stage: build
  extends: .terraform:build

deploy:
  extends: .terraform:deploy
  dependencies:
    - build
  environment:
    name: $TF_STATE_NAME
cleanup:
 extends: .terraform:destroy
 environment:
   name: $TF_STATE_NAME
 rules:
   - if: $CI_COMMIT_TITLE == "destroy"
     when: on_success