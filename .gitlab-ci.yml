include:
  - local: "/templates/.gitlab-ci-aquasec-trivy-scan.yml"
  - local: "/templates/vars/.gitlab-ci-pipeline-coe-vars.yml"
  - local: '/templates/.gitlab-ci-aws.yml'
  - local: '/templates/.gitlab-ci-docker-build.yml'
  - local: '/templates/.gitlab-ci-checkov-scan.yml'
  - template: Jobs/SAST-IaC.gitlab-ci.yml
  - template: Terraform.latest.gitlab-ci.yml
default:
  image:
    name: amazon/aws-cli:2.11.18
    entrypoint: ["/bin/sh", "-c"]

stages:
  - .pre
  - build
  - scan
  - validate
  - fmt
  - deploy
  - terraform plan
  - checkov scan
  - terraform apply
  - test
  - cleanup

before_script:
  id_tokens:
  GITLAB_OIDC_TOKEN:
    aud: https://$CI_SERVER_HOST
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity
pre-plan:
  stage: .pre
  variables:
    ROLE_ARN: ${ROLE_ARN}
    environment_var: test
  script:
    - cd vpc
    - terraform init -backend-config="$environment_var"-backend.tfvars -reconfigure
    - terraform workspace select "$environment_var"
    - terraform output -json
# terraform plan:
#   stage: terraform plan
#   variables:
#      ROLE_ARN: ${ROLE_ARN}
#      environment_var: test
#   script:
#     - pwd
#     - terraform plan -var-file="$environment_var".tfvars -out="$environment_var"-tfplan
#     - terraform show -json $environment_var-tfplan | jq '.' > $environment_var-tfplan.json
#   artifacts:
#       paths:
#       - vpc/dev-tfplan*
#       expire_in: 20 minutes
#     only:
#       changes:
#       - vpc/*
# image:
# name: hashicorp/terraform:light
# entrypoint:
# - '/usr/bin/env'
# - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'

# cache:
# paths:
# - .terraform
# key: “$CI_BUILD_REPO”

# plan:
# stage: terraform plan
# variables:
#     environment_var: dev
#     OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
# script:
# - terraform plan -var-file="$environment_var".tfvars -out="$environment_var"-tfplan
# - terraform show -json $environment_var-tfplan | jq '.' > $environment_var-tfplan.json
# when: always
# artifacts:
# paths:
# - "$environment_var"-tfplan

# apply:
# stage: apply
# script:
# - terraform init -backend-config="$environment_var"-backend.tfvars -reconfigure
# - terraform workspace select "$environment_var"
# - terraform output -json
# - terraform apply
# when: manual
# dependencies:
# - plan


variables:
  WORKING_DIR: .
  DOCKER_REGISTRY: $CI_REGISTRY_IMAGE
  IMAGE_NAME: node-image
  IMAGE_VERSION: $CI_COMMIT_SHORT_SHA
  DOCKER_USER: $CI_REGISTRY_USER
  DOCKER_PASSWORD: $CI_REGISTRY_PASSWORD
  DOCKER_TARGET_IMAGE: $IMAGE_NAME:$IMAGE_VERSION
  SBOM_FILE: trivy.cdx.json



.invoke-awscli-commands-with-assumerole:
  image:
    name: aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://$CI_SERVER_HOST

  before_script:
    - export VARIABLE_NAME=ROLE_ARN
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token $CI_JOB_JWT_V2
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - aws sts get-caller-identity

  after_script:
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

.terraform_template:
  extends:
    - .invoke-awscli-commands-with-assumerole
  variables:
    ROLE_ARN: ${OPEN_ID_ROLE_ARN}
  before_script:
    - echo $READ_TOKEN > ~/.terraformrc 
    - !reference [.invoke-awscli-commands-with-assumerole, before_script]
    - LOCATION=$(echo ${CI_JOB_NAME} | cut -d":" -f3)
    #- cd ${LOCATION}
    -  cd eks-cluster
    - terraform init -backend-config="$environment_var"-backend.tfvars -reconfigure
    - terraform workspace select "$environment_var"
    - terraform output -json

  after_script:
    - !reference [.invoke-awscli-commands-with-assumerole, after_script]
    - rm ~/.terraformrc

.terraform_plan_template:
  stage: terraform plan
  extends: .terraform_template
  script:
    - pwd
    - terraform plan -var-file="$environment_var".tfvars -out="$environment_var"-tfplan
    - terraform show -json $environment_var-tfplan | jq '.' > $environment_var-tfplan.json

.terraform_apply_template:
  stage: terraform apply
  extends: .terraform_template
  script:
    - pwd
    - terraform apply "$environment_var"-tfplan