include:
  - project: "innersource/sgts/ship-hats/ship-hats-templates"
    ref: "main"
    file:
      - /templates/.gitlab-ci-aquasec-trivy-scan.yml
      - /templates/vars/.gitlab-ci-pipeline-coe-vars.yml
      - /templates/.gitlab-ci-aws.yml
      - /templates/.gitlab-ci-docker-build.yml
      - /templates/.gitlab-ci-checkov-scan.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml

stages:
  - build
  - scan
  - sign
  - verify
  - deploy

variables:
  WORKING_DIR: .
  DOCKER_REGISTRY: $CI_REGISTRY_IMAGE
  IMAGE_NAME: node-image
  IMAGE_VERSION: $CI_COMMIT_SHORT_SHA
  DOCKER_USER: $CI_REGISTRY_USER
  DOCKER_PASSWORD: $CI_REGISTRY_PASSWORD
  DOCKER_TARGET_IMAGE: $IMAGE_NAME:$IMAGE_VERSION
  SBOM_FILE: trivy.cdx.json
  # variables required in SHIP-HATS Templates .gitlab-ci.yml for this example:
  COSIGN_KEY: ""  # To use COSIGN_PASSWORD
  COSIGN_PUB: ""  # To use COSIGN_PASSWORD
  # COSIGN_PASSWORD  # This variable is set in CICD variables

iac-sast:
  stage: .pre


### web-npm ####
build-image:
  stage: build
  extends:
    - .build-and-push-docker-image
  variables:
    DOCKER_TARGET_REGISTRY: $DOCKER_REGISTRY
  before_script:
    - cd web-npm

trivy-scan:
  stage: scan
  extends:
    - .trivy-scan
  variables:
    SCAN_TARGET: $DOCKER_REGISTRY/$DOCKER_TARGET_IMAGE
    REPORT_LEVELS: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
    FAIL_LEVELS: CRITICAL
    TRIVY_USERNAME: $DOCKER_USER
    TRIVY_PASSWORD: $DOCKER_PASSWORD
    TRIVY_SBOM_FILE: $SBOM_FILE

docker-push-to-aws-ecr-job:
  stage: deploy
  extends:
    - .invoke-ecr-token-retrieval
  image: $PIPELINE_COE_REGISTRY/ecr-container:latest
  variables:
    SRC_USER: $DOCKER_USER
    SRC_PASSWORD: $DOCKER_PASSWORD
    DEST_USER: "AWS"
    SRC_IMAGE: $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION
    DEST_IMAGE: $AWS_ECR_URL/result:$IMAGE_VERSION
  before_script:
    - .invoke-ecr-token-retrieval, before_script
    - OPTS="--remove-signatures --src-creds $SRC_USER:$SRC_PASSWORD --dest-creds $DEST_USER:$ECR_TOKEN --digestfile $CI_PROJECT_DIR/digest"
  artifacts:
    paths:
      - $CI_PROJECT_DIR/digest
    expire_in: 1 week
  script:
    - echo "changes in docker file"

  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      changes:
        paths:
          - web-npm/*
        compare_to: 'refs/heads/main'
      allow_failure: true


deploy-k8s-service:
  extends: .invoke-kubectlupdateconfig
  stage: deploy
  script:
    - kubectl apply -f ./eks-cluster/k8s/deployment.yml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      changes:
        paths:
          - /eks-cluster/k8s/*
        compare_to: 'refs/heads/main'
      allow_failure: true


.terraform_template:
  extends:
    - .invoke-awscli-commands-with-assumerole
  image: registry.${CI_SERVER_HOST}/wog/gvt/ship/ship-2/ship2-infra/common/docker:latest
  variables:
    ROLE_ARN: ${OPEN_ID_ROLE_ARN}
  before_script:
    - echo $READ_TOKEN > ~/.terraformrc 
    - .invoke-awscli-commands-with-assumerole, before_script
    - LOCATION=$(echo ${CI_JOB_NAME} | cut -d":" -f3)
    - cd terraform/${LOCATION}
    - pwd
    - terraform init -backend-config="$environment_var"-backend.tfvars -reconfigure
    - terraform workspace select "$environment_var"
    - terraform output -json

  after_script:
    - .invoke-awscli-commands-with-assumerole, after_script
    - rm ~/.terraformrc

.terraform_plan_template:
  stage: terraform plan
  extends: .terraform_template
  script:
    - pwd
    - terraform plan -var-file="$environment_var".tfvars -out="$environment_var"-tfplan
    - terraform show -json $environment_var-tfplan | jq '.' > $environment_var-tfplan.json

.terraform_apply_template:
  stage: terraform apply
  extends: .terraform_template
  script:
    - pwd
    - terraform apply "$environment_var"-tfplan

.checkov-scan-template:
  extends: .checkov-scan
  stage: checkov scan
  variables:
    OPTS: "-f $environment_var-tfplan.json --check $CHECKOV_IDS"
  before_script:
    - LOCATION=$(echo ${CI_JOB_NAME} | cut -d":" -f3)
    - cd terraform/${LOCATION}
    - pwd
    - |
      CHECK=`echo $OPTS | awk -F"--check" '{print $2}' | awk -F" " '{print $1}'`
      SKIP_CHECK=`echo $OPTS | awk -F"--skip-check" '{print $2}' | awk -F" " '{print $1}'`
      if [ ! -z $SKIP_CHECK ]
      then
        CHECKOV_IDS=$(echo $CHECK | sed "s/$SKIP_CHECK//g")
      fi
      OPTS="-f $environment_var-tfplan.json --check $CHECKOV_IDS"
  after_script:
    - LOCATION=$(echo ${CI_JOB_NAME} | cut -d":" -f3)
    - cp terraform/${LOCATION}/checkov_results.xml /tmp/$CI_PROJECT_PATH
  allow_failure: false


##################### vpc folder ###########################

dev:terraform-pre-plan:vpc:
  stage: .pre
  extends: .terraform_plan_template
  variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
  environment: dev
  artifacts:
    paths:
    - terraform/vpc/dev-tfplan*
    expire_in: 20 minutes
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      changes:
        paths:
          - terraform/vpc/*
        compare_to: 'refs/heads/main'
      allow_failure: true

dev:terraform-plan:vpc:
  stage: build
  extends: .terraform_plan_template
  variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
  environment: dev
  artifacts:
    paths:
    - terraform/vpc/dev-tfplan*
    expire_in: 20 minutes
  only:
    refs:
      - merge_requests
    changes:
      - terraform/vpc/*

dev:terraform-plan:vpc:checkov-scan:
  stage: scan
  extends: .checkov-scan-template
  variables:
    environment_var: dev
    OPTS: "-f $environment_var-tfplan.json --check $CHECKOV_IDS --skip-check CKV2_AWS_11,CKV2_AWS_12"
  needs:
  - job: dev:terraform-plan:vpc
    artifacts: true
  only:
    refs:
      - merge_requests
    changes:
      - terraform/vpc/*

dev:terraform-apply:vpc:
  stage: deploy
  extends: .terraform_apply_template
  variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
  environment: dev
  needs:
  - job: dev:terraform-plan:vpc
    artifacts: true
  - job: dev:terraform-plan:vpc:checkov-scan
  when: manual
  only:
    refs:
      - merge_requests
    changes:
      - terraform/vpc/*


#----eks-cluster
dev:terraform-pre-plan:eks-cluster:
  stage: .pre
  extends: .terraform_plan_template
  variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
  environment: dev
  artifacts:
    paths:
    - terraform/eks-cluster/dev-tfplan*
    expire_in: 20 minutes
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "main"'
      changes:
        paths:
          - terraform/eks-cluster/*
        compare_to: 'refs/heads/main'
      allow_failure: true

dev:terraform-plan:eks-cluster:
  stage: build
  extends: .terraform_plan_template
  variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
  environment: dev
  artifacts:
    paths:
    - terraform/eks-cluster/dev-tfplan*
    expire_in: 20 minutes
  only:
    refs:
      - merge_requests
    changes:
      - terraform/eks-cluster/*

dev:terraform-plan:eks-cluster:checkov-scan:
  stage: scan
  extends: .checkov-scan-template
  variables:
    environment_var: dev
    OPTS: "-f $environment_var-tfplan.json --check $CHECKOV_IDS --skip-check CKV2_AWS_11,CKV2_AWS_12"
  needs:
  - job: dev:terraform-plan:eks-cluster
    artifacts: true
  only:
    refs:
      - merge_requests
    changes:
      - terraform/eks-cluster/*

dev:terraform-apply:eks-cluster:
  stage: deploy
  extends: .terraform_apply_template
  variables:
    environment_var: dev
    OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
  environment: dev
  needs:
  - job: dev:terraform-plan:eks-cluster
    artifacts: true
  - job: dev:terraform-plan:eks-cluster:checkov-scan
  when: manual
  only:
    refs:
      - merge_requests
    changes:
      - terraform/eks-cluster/*

# #----redis-elasticcache
# dev:terraform-pre-plan:redis-elasticcache:
#   extends: .terraform_plan_template
#   variables:
#     environment_var: dev
#     OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
#   environment: dev
#   artifacts:
#     paths:
#     - terraform/redis-elasticcache/dev-tfplan*
#     expire_in: 20 minutes
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != "master"'
#       changes:
#         paths:
#           - terraform/redis-elasticcache/*
#         compare_to: 'refs/heads/master'
#       allow_failure: true

# dev:terraform-plan:redis-elasticcache:
#   extends: .terraform_plan_template
#   variables:
#     environment_var: dev
#     OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
#   environment: dev
#   artifacts:
#     paths:
#     - terraform/redis-elasticcache/dev-tfplan*
#     expire_in: 20 minutes
#   only:
#     refs:
#       - merge_requests
#     changes:
#       - terraform/redis-elasticcache/*

# dev:terraform-plan:redis-elasticcache:checkov-scan:
#   extends: .checkov-scan-template
#   variables:
#     environment_var: dev
#     OPTS: "-f $environment_var-tfplan.json --check $CHECKOV_IDS --skip-check CKV2_AWS_11,CKV2_AWS_12"
#   needs:
#   - job: dev:terraform-plan:redis-elasticcache
#     artifacts: true
#   only:
#     refs:
#       - merge_requests
#     changes:
#       - terraform/redis-elasticcache/*

# dev:terraform-apply:redis-elasticcache:
#   extends: .terraform_apply_template
#   variables:
#     environment_var: dev
#     OPEN_ID_ROLE_ARN : ${OPEN_ID_ROLE_ARN}
#   environment: dev
#   needs:
#   - job: dev:terraform-plan:redis-elasticcache
#     artifacts: true
#   - job: dev:terraform-plan:redis-elasticcache:checkov-scan
#   when: manual
#   only:
#     refs:
#       - merge_requests
#     changes:
#       - terraform/redis-elasticcache/*

